{"version":3,"sources":["util/actions.js","util/reveal.js","util/hazardPlacement.js","components/MineSweeperSquare.js","components/MineSweeperGrid.js","components/MineSweeperMenu.js","components/MineSweeperGame.js","App.js","reportWebVitals.js","index.js"],"names":["EASY","MEDIUM","HARD","DIFFICULTY","RESET","CLICK_SQUARE","MARK_SQUARE","UPDATE_GRID","GAME_OVER","NEW_GAME","shouldCheckAround","squareIndex","safeSquares","grid","includes","revealed","marked","getSquaresAround","square","gridWidth","gridArray","output","offsets","forEach","offsetY","offsetX","targetIndex","length","push","createEmptyGrid","gridHeight","Array","from","repeat","map","value","MineSweeperSquare","squareData","gameStatus","dispatch","onClick","event","type","onContextMenu","className","isGameOver","disabled","MineSweeperGrid","gridOptions","revealSquare","clickedSquare","dimensions","inProgress","currentGrid","gridSizes","bombQuantity","bombs","newGrid","totalGridArea","excludedSquare","locations","i","location","Math","floor","random","randomBombLocationsExcluding","bombLocation","reduce","prev","curr","countBombsAround","createGrid","dispatchType","gameOver","originSquare","squaresToCheck","nextSquare","pop","newSquare","chainReveal","handleDispatch","action","preventDefault","newMarking","markSquare","_row","rowIndex","slice","MineSweeperMenu","name","onChange","target","MineSweeperGame","useState","setGridOptions","setGrid","setGameStatus","score","setScore","gameWon","useCallback","setGameFinished","setDifficulty","difficulty","prevStatus","useEffect","total","prevScore","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb9b36b2.chunk.js","sourcesContent":["export const EASY = \"EASY\";\r\nexport const MEDIUM = \"MEDIUM\";\r\nexport const HARD = \"HARD\";\r\nexport const DIFFICULTY = \"DIFFICULTY\";\r\nexport const RESET = \"RESET\";\r\nexport const CLICK_SQUARE = \"CLICK_SQUARE\";\r\nexport const MARK_SQUARE = \"MARK_SQUARE\";\r\nexport const UPDATE_GRID = \"UPDATE_GRID\";\r\nexport const GAME_OVER = \"GAME_OVER\";\r\nexport const GAME_WON = \"GAME_WON\";\r\nexport const UPDATE_PROGRESS = \"UPDATE_PROGRESS\";\r\nexport const NEW_GAME = \"NEW_GAME\";","export function chainReveal(originSquare, grid, [gridWidth]) {\r\n  const safeSquares = []\r\n  const squaresToCheck = [originSquare];\r\n  while (squaresToCheck.length) {\r\n    const nextSquare = squaresToCheck.pop();\r\n    if (shouldCheckAround(nextSquare, safeSquares, grid)) continue;\r\n    if (grid[nextSquare].value === 0) getSquaresAround(nextSquare, gridWidth, grid).forEach(newSquare => squaresToCheck.push(newSquare));\r\n    grid[nextSquare].revealed = true;\r\n    safeSquares.push(nextSquare);\r\n  }\r\n  return safeSquares;\r\n}\r\n\r\nexport function shouldCheckAround(squareIndex, safeSquares, grid) {\r\n  return safeSquares.includes(squareIndex) || grid[squareIndex].revealed || grid[squareIndex].marked === 1;\r\n}\r\n\r\nexport function getSquaresAround(square, gridWidth, gridArray) {\r\n  const output = [];\r\n  const offsets = [-1, 0, 1];\r\n  offsets.forEach(offsetY => {\r\n    offsets.forEach(offsetX => {\r\n      let targetIndex = square + ((gridWidth * offsetY) + offsetX);\r\n\r\n      if (offsetY === 0 && offsetY === offsetX) return;                     // ignore the origin square (0,0)\r\n      if (targetIndex < 0 || targetIndex >= gridArray.length) return;       // ignore values outside the array range\r\n      if (square % gridWidth === 0 && offsetX === -1) return;               // ignore values to the left if checking the left column\r\n      if (square % gridWidth === (gridWidth - 1) && offsetX === 1) return;  // ignore values to the right if checking the right column\r\n\r\n      output.push(targetIndex);\r\n    });\r\n  });\r\n  return output;\r\n}","import { getSquaresAround } from \"./reveal\";\r\n\r\nexport function randomBombLocationsExcluding(bombQuantity, totalGridArea, excludedSquare) {\r\n  const locations = [];\r\n  for (let i = 0; i < bombQuantity; i++) {\r\n    let location = -1;\r\n    while (locations.includes(location) || location < 0 || location === excludedSquare) {\r\n      location = Math.floor(Math.random() * totalGridArea);\r\n    }\r\n    locations.push(location);\r\n  }\r\n  return locations;\r\n}\r\n\r\nexport function countBombsAround(square, gridWidth, gridArray) {\r\n  return getSquaresAround(square, gridWidth, gridArray).reduce((prev, curr) => (gridArray[curr].value < 0 ? prev + 1 : prev), 0);\r\n}\r\n\r\nexport function createEmptyGrid([gridWidth, gridHeight]) { return Array.from(\"0\".repeat(gridWidth * gridHeight)).map(() => ({ revealed: false, value: 0, marked: 0 })); }","import { CLICK_SQUARE, MARK_SQUARE } from \"../util/actions\";\r\nfunction MineSweeperSquare({ squareData: { value, revealed, marked }, squareIndex, gameStatus, dispatch }) {\r\n  const bomb = \"*\";\r\n  const marker = \"M\";\r\n  const question = \"?\";\r\n\r\n  function generateClassNamefromProps() {\r\n    if (value === -2) return \"bomb\";\r\n    if (revealed && value >= 0) return `nearby-${value} revealed`;\r\n    if (gameStatus.isGameOver && marked > 0) {\r\n      if (value < 0) return \"correct\";\r\n      return \"incorrect\";\r\n    }\r\n    return \"\";\r\n  }\r\n  return <button\r\n    onClick={(event) => dispatch(event, { type: CLICK_SQUARE, value: squareIndex })}\r\n    onContextMenu={event => dispatch(event, { type: MARK_SQUARE, value: squareIndex })}\r\n    className={\"gridSquare \" + generateClassNamefromProps()}\r\n    disabled={gameStatus.isGameOver}\r\n  >\r\n    {revealed && value > 0 && value}\r\n    {revealed && value < 0 && (marked === 0 ? bomb : marker)}\r\n    {!revealed && marked > 0 && (marked === 1 ? marker : question)}\r\n  </button>\r\n}\r\n\r\nexport default MineSweeperSquare;","import { CLICK_SQUARE, GAME_OVER, MARK_SQUARE, UPDATE_GRID, NEW_GAME } from \"../util/actions\";\r\nimport { chainReveal } from \"../util/reveal\";\r\nimport { randomBombLocationsExcluding, createEmptyGrid, countBombsAround } from \"../util/hazardPlacement\";\r\nimport MineSweeperSquare from \"./MineSweeperSquare\";\r\n\r\nfunction MineSweeperGrid({ gridOptions, gameStatus, dispatch, grid }) {\r\n\r\n  function revealSquare(clickedSquare, grid, { dimensions }, { inProgress }) {\r\n    const currentGrid = inProgress ? grid : createGrid(clickedSquare, gridOptions)\r\n    const dispatchType = inProgress ? UPDATE_GRID : NEW_GAME;\r\n    if (currentGrid[clickedSquare].revealed) return;\r\n    if (currentGrid[clickedSquare].marked === 1) return;\r\n    if (currentGrid[clickedSquare].value === -1) return gameOver(clickedSquare);\r\n    const safeSquares = chainReveal(clickedSquare, Array.from(currentGrid), dimensions);\r\n    dispatch({ type: dispatchType, grid: currentGrid.map((square, i) => safeSquares.includes(i) ? { ...square, revealed: true } : square) });\r\n  }\r\n\r\n  function markSquare(clickedSquare, grid) {\r\n    if (grid[clickedSquare].revealed) return;\r\n    const newMarking = grid[clickedSquare].marked + 1;\r\n    dispatch({ type: UPDATE_GRID, grid: grid.map((square, squareIndex) => squareIndex === clickedSquare ? { ...square, marked: newMarking < 3 ? newMarking : 0 } : square) })\r\n  }\r\n\r\n  function createGrid(clickedSquare, gridOptions) {\r\n    const { dimensions: gridSizes, bombs: bombQuantity } = gridOptions;\r\n    const newGrid = createEmptyGrid(gridSizes);\r\n    const [gridWidth, gridHeight] = gridSizes;\r\n\r\n    randomBombLocationsExcluding(bombQuantity, gridWidth * gridHeight, clickedSquare).forEach(bombLocation => newGrid[bombLocation].value = -1);\r\n\r\n    newGrid.forEach((square, i) => {\r\n      if (square.value < 0) return;\r\n      newGrid[i].value = countBombsAround(i, gridWidth, newGrid);\r\n    });\r\n    return newGrid;\r\n  }\r\n\r\n  function gameOver(clickedSquare) {\r\n    dispatch({ type: GAME_OVER, grid: grid.map((square, i) => square.value < 0 ? (i === clickedSquare ? { ...square, value: -2, marked: 0, revealed: true } : { ...square, revealed: true }) : square) })\r\n  }\r\n\r\n  function handleDispatch(event, action) {\r\n    event.preventDefault();\r\n    const { inProgress, isGameOver } = gameStatus;\r\n    switch (action.type) {\r\n      case CLICK_SQUARE:\r\n        revealSquare(action.value, grid, gridOptions, gameStatus);\r\n        break;\r\n      case MARK_SQUARE:\r\n        if (!isGameOver && inProgress) markSquare(action.value, grid);\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n  return <div className=\"gridContainer\">\r\n    {grid.length > 0 && Array.from(\" \".repeat(gridOptions.dimensions[1])).map((_row, rowIndex) => (\r\n      <div key={`row${rowIndex}`} className=\"row\">\r\n        {grid.slice(rowIndex * gridOptions.dimensions[0], (rowIndex + 1) * gridOptions.dimensions[0])\r\n          .map((squareData, squareIndex) => (\r\n            <MineSweeperSquare\r\n              key={`row${rowIndex} column${squareIndex}`}\r\n              dispatch={handleDispatch}\r\n              squareData={squareData}\r\n              squareIndex={squareIndex + (rowIndex * gridOptions.dimensions[0])}\r\n              gameStatus={gameStatus}\r\n            />\r\n          ))}\r\n      </div>)\r\n    )}\r\n  </div>\r\n}\r\n\r\nexport default MineSweeperGrid;","import { RESET, DIFFICULTY, EASY, MEDIUM, HARD } from \"../util/actions\";\r\n\r\nfunction MineSweeperMenu({ dispatch }) {\r\n  return <>\r\n    <select name=\"difficulty\" onChange={event => dispatch({ type: DIFFICULTY, value: event.target.value })}>\r\n      <option value={EASY}>Easy</option>\r\n      <option value={MEDIUM}>Medium</option>\r\n      <option value={HARD}>Hard</option>\r\n    </select>\r\n    <button onClick={() => dispatch({ type: RESET })}>Reset</button>\r\n  </>\r\n}\r\n\r\nexport default MineSweeperMenu;","import { useCallback, useEffect, useState } from \"react\";\r\nimport { DIFFICULTY, EASY, HARD, MEDIUM, RESET, UPDATE_GRID, GAME_OVER, NEW_GAME } from \"../util/actions\";\r\nimport { createEmptyGrid } from \"../util/hazardPlacement\";\r\nimport MineSweeperGrid from \"./MineSweeperGrid\";\r\nimport MineSweeperOptions from \"./MineSweeperMenu\";\r\nimport \"../sweeper.css\";\r\n\r\nfunction MineSweeperGame() {\r\n  const [gridOptions, setGridOptions] = useState({ bombs: 10, dimensions: [8, 8] });\r\n  const [grid, setGrid] = useState([]);\r\n  const [gameStatus, setGameStatus] = useState({ inProgress: false, isGameOver: false });\r\n  const [score, setScore] = useState({ revealed: 0, marked: 0 });\r\n  const gameWon = useCallback(() => setGameFinished(), []);\r\n\r\n  function setDifficulty(difficulty) {\r\n    switch (difficulty) {\r\n      case HARD:\r\n        setGridOptions({ dimensions: [30, 15], bombs: 100 });\r\n        break;\r\n      case MEDIUM:\r\n        setGridOptions({ dimensions: [15, 15], bombs: 64 });\r\n        break;\r\n      case EASY:\r\n        setGridOptions({ dimensions: [8, 8], bombs: 10 })\r\n        break;\r\n      default:\r\n        setDifficulty(EASY);\r\n    }\r\n  }\r\n\r\n  function handleDispatch(action) {\r\n    switch (action.type) {\r\n      case NEW_GAME:\r\n        setGrid(() => action.grid);\r\n        setGameStatus(prevStatus => ({ ...prevStatus, inProgress: true }));\r\n        break;\r\n      case UPDATE_GRID:\r\n        setGrid(() => action.grid);\r\n        break;\r\n      case GAME_OVER:\r\n        setGameFinished();\r\n        setGrid(() => action.grid);\r\n        break;\r\n      case DIFFICULTY:\r\n        setDifficulty(action.value);\r\n        break;\r\n      case RESET:\r\n        setGrid(() => createEmptyGrid(gridOptions.dimensions));\r\n        setGameStatus(prevStatus => ({ ...prevStatus, inProgress: false, isGameOver: false }));\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  function setGameFinished() {\r\n    setGameStatus(prevStatus => ({ ...prevStatus, inProgress: false, isGameOver: true }));\r\n  }\r\n\r\n  useEffect(() => {\r\n    setGrid(() => createEmptyGrid(gridOptions.dimensions));\r\n    setGameStatus(prevStatus => ({ ...prevStatus, inProgress: false, isGameOver: false }));\r\n  }, [gridOptions]);\r\n\r\n  useEffect(() => {\r\n    if (gameStatus.inProgress) {\r\n      const marked = grid.reduce((total, square) => square.marked === 1 ? total + 1 : total, 0);\r\n      const revealed = grid.reduce((total, square) => square.revealed ? total + 1 : total, 0);\r\n      setScore(prevScore => ({ ...prevScore, marked, revealed }))\r\n      if (revealed === (gridOptions.dimensions[0] * gridOptions.dimensions[1] - gridOptions.bombs)) gameWon();\r\n    }\r\n  }, [grid, gridOptions, gameStatus, gameWon])\r\n\r\n  return (\r\n    <div className=\"minesweeper\">\r\n      <div className=\"row\">\r\n        <MineSweeperOptions dispatch={handleDispatch} />\r\n        {`${score.marked} bombs marked`}\r\n      </div>\r\n      <MineSweeperGrid gameStatus={gameStatus} gridOptions={gridOptions} dispatch={handleDispatch} grid={grid} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MineSweeperGame;","import MineSweeperGame from \"./components/MineSweeperGame\";\r\nimport \"./sweeper.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MineSweeperGame />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}